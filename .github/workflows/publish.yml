name: Publish Legal Documents

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Determine version bump
        id: version
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Determine version bump type
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"feat("* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: bump
        run: |
          # Bump version based on commit
          NEW_VERSION=$(npm version ${{ steps.version.bump }} --no-git-tag-version)
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json
          git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]" || echo "No changes to commit"
      
      - name: Build package
        run: pnpm build
      
      - name: Publish to NPM
        run: |
          # Check if package exists and get current version
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          NPM_VERSION=$(npm view $PACKAGE_NAME version 2>/dev/null || echo "0.0.0")
          LOCAL_VERSION=$(node -p "require('./package.json').version")
          
          # Only publish if local version is newer
          if [ "$LOCAL_VERSION" != "$NPM_VERSION" ]; then
            npm publish --access public
            echo "✅ Published version $LOCAL_VERSION"
          else
            echo "⏭️ Version $LOCAL_VERSION already published, skipping"
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Create GitHub Release
        if: steps.bump.outputs.new_version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          release_name: Release ${{ steps.bump.outputs.new_version }}
          body: |
            ## Changes in this release
            
            ${{ github.event.head_commit.message }}
            
            ### Package Installation
            ```bash
            pnpm add @comms-id/legal-documents@${{ steps.bump.outputs.new_version }}
            ```
          draft: false
          prerelease: false
      
      - name: Push changes
        if: steps.bump.outputs.new_version != ''
        run: |
          git push origin main
          git push origin ${{ steps.bump.outputs.new_version }}