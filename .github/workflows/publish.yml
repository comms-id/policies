name: Publish Legal Documents

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Determine version bump
        id: version
        run: |
          # Get the last commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          
          # Determine version bump type
          if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"feat("* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: bump
        run: |
          # Bump version based on commit
          NEW_VERSION=$(npm version ${{ steps.version.outputs.bump }} --no-git-tag-version)
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          
          # Commit version bump
          git add package.json
          git commit -m "chore: bump version to ${NEW_VERSION} [skip ci]" || echo "No changes to commit"
      
      - name: Build package
        run: pnpm build
      
      - name: Commit built files
        run: |
          # Check if dist has changes
          if [ -n "$(git status --porcelain dist/)" ]; then
            git add dist/
            git commit -m "chore: update built files [skip ci]"
            echo "Built files committed"
          else
            echo "No changes to built files"
          fi

      - name: Create GitHub Release
        if: steps.bump.outputs.new_version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.bump.outputs.new_version }}
          name: Release ${{ steps.bump.outputs.new_version }}
          body: |
            ## Changes in this release

            ${{ github.event.head_commit.message }}

            ### Installation

            This package is distributed via GitHub Releases. To use it in your project:

            1. Download the release assets or clone the repository
            2. Import from the `dist/` directory:
               ```javascript
               import { privacyPolicy, termsOfUse } from '@comms-id/legal-documents';
               ```

            ### Document Versions

            Check [document-versions.json](https://github.com/comms-id/policies/blob/main/scripts/document-versions.json) for current document versions.
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push changes
        if: steps.bump.outputs.new_version != ''
        run: |
          git push origin main
          git push origin ${{ steps.bump.outputs.new_version }}